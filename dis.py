# -*- coding: utf-8 -*-
import os
import asyncio
import requests
from datetime import datetime
from colorama import Fore, Style, init

init(autoreset=True)

# ===== BANNER =====
def print_banner():
    now = datetime.now().strftime("%d-%m-%Y %H:%M:%S")
    print(f"{Fore.MAGENTA}{Style.BRIGHT}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    print(f"{Fore.MAGENTA}{Style.BRIGHT}‚ïë  ‚öôÔ∏è  ùëµùíêùíóùíÇùëø Spam Tool | Zalo Group Premium         ‚ïë")
    print(f"{Fore.MAGENTA}{Style.BRIGHT}‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£")
    print(f"{Fore.MAGENTA}{Style.BRIGHT}‚ïë{Fore.CYAN}{Style.BRIGHT} üëë Admin     : Ti·∫øn ƒê·∫°t (Real)")
    print(f"{Fore.MAGENTA}{Style.BRIGHT}‚ïë{Fore.CYAN}{Style.BRIGHT} üìÖ Kh·ªüi ch·∫°y : {now}")
    print(f"{Fore.MAGENTA}{Style.BRIGHT}‚ïë{Fore.CYAN}{Style.BRIGHT} ‚ö° Phi√™n b·∫£n : Premium V5.0")
    print(f"{Fore.MAGENTA}{Style.BRIGHT}‚ïë{Fore.CYAN}{Style.BRIGHT} üåà Developer : NovaX Team")
    print(f"{Fore.MAGENTA}{Style.BRIGHT}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n")

# ===== H√ÄM D√ôNG CHUNG =====
def clean_line_for_hash(line):
    stripped = line.lstrip('#').lstrip()
    return "# > " + stripped if stripped else ""

def input_label(label):
    """
    Nh·∫≠p gi√° tr·ªã 1 l·∫ßn:
    - Tr∆∞·ªõc khi nh·∫≠p: hi·ªÉn th·ªã label
    - D√≤ng nh·∫≠p: ‚û§ Nh·∫≠p:
    - Sau khi nh·∫≠p: xo√° d√≤ng ‚û§ Nh·∫≠p v√† in > gi√° tr·ªã
    """
    print(f"{Fore.YELLOW}{label}:{Style.RESET_ALL}")
    value = input(f"‚û§ Nh·∫≠p: {Fore.CYAN}").strip()
    # Xo√° d√≤ng input v√† in > gi√° tr·ªã
    print(f"\033[F\033[K> {Fore.CYAN}{value}{Style.RESET_ALL}")
    return value

# ===== NH√ÇY ROUND-ROBIN + ONLINE/OFFLINE =====
async def spam_nhay_status(tokens, channel_id, message_file, delay, mention_ids=None, name_mention=None):
    headers_list = [{"Authorization": t, "Content-Type": "application/json"} for t in tokens]

    with open(message_file, "r", encoding="utf-8-sig") as f:
        messages = [clean_line_for_hash(line) for line in f if line.strip()]

    if not messages:
        print(Fore.RED + "File nhay.txt r·ªóng!")
        return

    token_count = len(tokens)
    msg_idx = 0
    token_idx = 0

    while True:
        msg = messages[msg_idx]

        if mention_ids:
            tags = " ".join(f"<@{uid}>" for uid in mention_ids)
            msg = f"{msg} {tags}"
        if name_mention:
            msg = msg.replace("(name)", name_mention)

        token = tokens[token_idx]
        headers = headers_list[token_idx]

        url_typing = f"https://discord.com/api/v9/channels/{channel_id}/typing"
        url_send = f"https://discord.com/api/v9/channels/{channel_id}/messages"

        try:
            requests.post(url_typing, headers=headers)
            await asyncio.sleep(1.5)
            r = requests.post(url_send, json={"content": msg}, headers=headers)
            if r.status_code in (200,201):
                status = Fore.GREEN + "Online ‚úÖ"
            else:
                status = Fore.RED + "Offline ‚ùå"
        except Exception:
            status = Fore.RED + "Offline ‚ùå"

        # HI·ªÇN TH·ªä M√ÄU
        print(f"{Fore.YELLOW}Token {token_idx+1}{Fore.RESET} | {Fore.CYAN}ID nh√≥m: {channel_id}{Fore.RESET} | {status}")

        token_idx = (token_idx + 1) % token_count
        msg_idx = (msg_idx + 1) % len(messages)

        await asyncio.sleep(delay)

# ===== NG√îN ROUND-ROBIN + ONLINE/OFFLINE =====
async def spam_ngon_status(tokens, channel_id, message_file, delay):
    headers_list = [{"Authorization": t, "Content-Type": "application/json"} for t in tokens]

    with open(message_file, "r", encoding="utf-8-sig") as f:
        messages = [line.strip() for line in f if line.strip()]

    if not messages:
        print(Fore.RED + "File tin nh·∫Øn r·ªóng!")
        return

    token_count = len(tokens)
    msg_idx = 0
    token_idx = 0

    while True:
        msg = messages[msg_idx]

        token = tokens[token_idx]
        headers = headers_list[token_idx]

        url_typing = f"https://discord.com/api/v9/channels/{channel_id}/typing"
        url_send = f"https://discord.com/api/v9/channels/{channel_id}/messages"

        try:
            requests.post(url_typing, headers=headers)
            await asyncio.sleep(1.5)
            r = requests.post(url_send, json={"content": msg}, headers=headers)
            if r.status_code in (200,201):
                status = Fore.GREEN + "Online ‚úÖ"
            else:
                status = Fore.RED + "Offline ‚ùå"
        except Exception:
            status = Fore.RED + "Offline ‚ùå"

        print(f"{Fore.YELLOW}Token {token_idx+1}{Fore.RESET} | {Fore.CYAN}ID nh√≥m: {channel_id}{Fore.RESET} | {status}")

        token_idx = (token_idx + 1) % token_count
        msg_idx = (msg_idx + 1) % len(messages)

        await asyncio.sleep(delay)

# ===== MAIN =====
async def main():
    os.system('cls' if os.name=='nt' else 'clear')
    print_banner()

    # ===== MENU CH√çNH =====
    print(Fore.MAGENTA + Style.BRIGHT + "==== MENU CH√çNH ====")
    print(Fore.YELLOW + "1. Ng√¥n (spam file t·ª± ch·ªçn)")
    print(Fore.YELLOW + "2. Nh√¢y (spam nhay.txt)")

    while True:
        choice = input_label("Ch·ªçn ch·∫ø ƒë·ªô (1 ho·∫∑c 2)")
        if choice in ["1","2"]:
            break
        print(Fore.RED + "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Nh·∫≠p l·∫°i!")

    # Nh·∫≠p ID k√™nh
    channel_id = input_label("ID Nh√≥m")

    # Nh·∫≠p file token
    token_file = input_label("File ch·ª©a token")
    with open(token_file, "r", encoding="utf-8-sig") as f:
        tokens = [t.strip() for t in f if t.strip()]
    if not tokens:
        print(Fore.RED + "File token r·ªóng!")
        return

    # Nh·∫≠p delay
    delay_input = input_label("Delay gi·ªØa m·ªói tin nh·∫Øn (gi√¢y)")
    try:
        delay = float(delay_input)
    except ValueError:
        print(Fore.RED + "Delay kh√¥ng h·ª£p l·ªá, m·∫∑c ƒë·ªãnh 1 gi√¢y")
        delay = 1.0

    tasks = []

    if choice == "1":  # NG√îN
        message_file = input_label("File tin nh·∫Øn")
        tasks.append(spam_ngon_status(tokens, channel_id, message_file, delay))

    elif choice == "2":  # NH√ÇY
        print(Fore.MAGENTA + Style.BRIGHT + "\n==== NH√ÇY MENU ====")
        print(Fore.YELLOW + "1. Nh√¢y th∆∞·ªùng")
        print(Fore.YELLOW + "2. Nh√¢y tag")

        while True:
            sub_choice = input_label("Ch·ªçn lo·∫°i Nh√¢y (1 ho·∫∑c 2)")
            if sub_choice in ["1","2"]:
                break
            print(Fore.RED + "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Nh·∫≠p l·∫°i!")

        mention_ids = []
        name_mention = None
        if sub_choice == "2":
            while True:
                uid = input_label("Nh·∫≠p user ID ƒë·ªÉ tag (nh·∫≠p done ƒë·ªÉ k·∫øt th√∫c)")
                if uid.lower() == "done":
                    break
                if uid.strip():
                    mention_ids.append(uid.strip())
            if input_label("C√≥ mu·ªën r√©o t√™n trong tin nh·∫Øn kh√¥ng? (y/n)").lower() == "y":
                name_mention = input_label("Nh·∫≠p t√™n ƒë·ªÉ r√©o")

        tasks.append(spam_nhay_status(tokens, channel_id, "nhay.txt", delay, mention_ids, name_mention))

    await asyncio.gather(*tasks)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print(Fore.RED + "\nTool ƒë√£ d·ª´ng.")