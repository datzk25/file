# tool_zalo_beauty_full.py
# -*- coding: utf-8 -*-
"""
Tool Zalo ‚Äî full, ƒë·∫πp, no-delete version
- Banner neon + gradient
- Menu 4 ch·∫ø ƒë·ªô:
    1) Nh√¢y (t·ª´ file nhay.txt)
    2) Ng√¥n (nh·∫≠p 1 tin nh·∫Øn)
    3) Ng√¥n + Tag nhi·ªÅu (ch·ªçn nhi·ªÅu th√†nh vi√™n b·∫±ng s·ªë, c√°ch nhau d·∫•u ph·∫©y)
    4) Nh√¢y + Tag nhi·ªÅu (nhay.txt + tag nhi·ªÅu)
- Ch·ªçn nh√≥m -> clear -> hi·ªÉn th·ªã th√†nh vi√™n (g·ªçn)
- Kh√¥ng c√≥ ch·ª©c nƒÉng x√≥a tin nh·∫Øn c·ªßa ng∆∞·ªùi kh√°c / c·ªßa bot
- Th·ª±c thi b·∫±ng thread, stop b·∫±ng Ctrl+C
"""

import os
import time
import threading
import random
import shutil
import socket
from datetime import datetime
from zlapi import ZaloAPI, ThreadType
from zlapi.models import Message, Mention

# ===================== UTILS & COLORS =====================
def rgb(r, g, b, t):
    return f"\033[38;2;{r};{g};{b}m{t}\033[0m"

def grad(text, c1, c2):
    out = ""
    n = max(1, len(text) - 1)
    for i, ch in enumerate(text):
        t = i / n
        r = int(c1[0] + (c2[0] - c1[0]) * t)
        g = int(c1[1] + (c2[1] - c1[1]) * t)
        b = int(c1[2] + (c2[2] - c1[2]) * t)
        out += rgb(r, g, b, ch)
    return out

def clear():
    os.system("cls" if os.name == "nt" else "clear")

def width():
    try:
        return shutil.get_terminal_size().columns - 4
    except:
        return 80

PALETTES = [
    ((255, 0, 255), (0, 255, 255)),
    ((255, 150, 50), (255, 80, 200)),
    ((120, 190, 255), (50, 255, 200)),
    ((180, 130, 255), (255, 100, 200)),
    ((80, 255, 160), (255, 100, 255))
]

def theme():
    return random.choice(PALETTES)

def neon_border(w, c1, c2):
    return grad("‚Äî" * w, c1, c2)

def neon_box(title="", lines=None, c1=(255,0,255), c2=(0,255,255)):
    w = width()
    b = neon_border(w, c1, c2)
    print(f"+{b}+")
    if title:
        t = grad(f" {title} ", c1, c2)
        print(f"|{t.center(w)}")
        print(f"+{b}+")
    for line in lines or []:
        inner = grad(line.strip(), (240,240,255), (200,255,255))
        print(f"| {inner:<{w-2}}")
    print(f"+{b}+")

# ===================== BANNER / LOGO =====================
def logo(c1, c2):
    art = [
        "‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó",
        "‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïù",
        "‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ïî‚ïù ",
        "‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ",
        "‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïó",
        "‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù",
    ]
    for l in art:
        print(grad(l, c1, c2))
    print(grad("‚ö° NOVAX SPAM TOOL | ZALO PREMIUM ‚ö°", (255,255,120), c2))

def banner_live(bot=None, c1=(255,0,255), c2=(0,255,255)):
    clear()
    logo(c1, c2)
    try:
        ip = socket.gethostbyname(socket.gethostname())
    except:
        ip = "Kh√¥ng x√°c ƒë·ªãnh"
    now = datetime.now().strftime("%d-%m-%Y %H:%M:%S")
    neon_box("TH√îNG TIN TOOL ZALO", [
        "üëë Admin     : Ti·∫øn ƒê·∫°t (Real)",
        f"üìÖ Kh·ªüi ch·∫°y : {now}",
        "‚ö° Phi√™n b·∫£n : Premium V5.0",
        "üåà Developer : NovaX Team",
        f"üåê Thi·∫øt b·ªã  : {ip}"
    ], c1, c2)

# ===================== BOT WRAPPER =====================
class Bot(ZaloAPI):
    def __init__(self, imei, cookies):
        super().__init__('api_key', 'secret_key', imei, cookies)
        self.imei = imei
        self.cookies = cookies

    def fetch_groups(self):
        try:
            groups = self.fetchAllGroups()
            result = []
            for gid in groups.gridVerMap:
                ginfo = self.fetchGroupInfo(gid)
                name = ginfo.gridInfoMap[gid]["name"]
                result.append({"id": gid, "name": name})
            return result
        except Exception as e:
            print(grad(f"‚ö†Ô∏è L·ªói l·∫•y nh√≥m: {e}", (255,80,80), (255,150,150)))
            return []

    def fetch_members(self, gid):
        try:
            info = self.fetchGroupInfo(gid)
            members = []
            for mem in info.gridInfoMap[gid]["memVerList"]:
                uid = mem.split("_")[0]
                try:
                    user_info = self.fetchUserInfo(uid)
                    name = user_info.changed_profiles[uid]["displayName"]
                    members.append({"id": uid, "name": name})
                except:
                    members.append({"id": uid, "name": f"[·∫®n danh {uid}]"})
            return members
        except Exception as e:
            print(grad(f"‚ö†Ô∏è L·ªói l·∫•y th√†nh vi√™n: {e}", (255,80,80), (255,150,150)))
            return []

# ===================== SPAM ROUTINES =====================
def spam_nhay(bot, gid, delay, stop_event):
    try:
        with open("nhay.txt", "r", encoding="utf-8") as f:
            lines = [x.strip() for x in f if x.strip()]
    except:
        print(grad("‚ùå Kh√¥ng t√¨m th·∫•y file nhay.txt", (255,80,80), (255,150,150)))
        return
    count = 0
    while not stop_event.is_set():
        for msg in lines:
            if stop_event.is_set(): return
            try:
                bot.send(Message(text=msg), gid, ThreadType.GROUP)
                count += 1
                print(grad(f"[{count}] {msg}", (180,255,180), (100,255,255)))
            except Exception as e:
                print(grad(f"‚ö†Ô∏è L·ªói: {e}", (255,80,80), (255,150,150)))
            time.sleep(delay)

def spam_ngon(bot, gid, msg, delay, stop_event):
    count = 0
    while not stop_event.is_set():
        try:
            bot.send(Message(text=msg), gid, ThreadType.GROUP)
            count += 1
            print(grad(f"[{count}] {msg}", (180,255,180), (100,255,255)))
        except Exception as e:
            print(grad(f"‚ö†Ô∏è L·ªói: {e}", (255,80,80), (255,150,150)))
        time.sleep(delay)

def spam_ngon_tag_multi(bot, gid, selected_members, msg, delay, stop_event):
    """
    G·ª≠i tag nhi·ªÅu ng∆∞·ªùi: g·ª≠i 1 tin/mention cho t·ª´ng member trong selected_members.
    (V√¨ ƒëa s·ªë API kh√¥ng h·ªó tr·ª£ mention nhi·ªÅu c√πng l√∫c; g·ª≠i t·ª´ng message l√† ·ªïn ƒë·ªãnh.)
    """
    count = 0
    while not stop_event.is_set():
        for m in selected_members:
            if stop_event.is_set(): return
            try:
                mention_text = f"@{m['name']}"
                full = f"{mention_text} {msg}"
                bot.send(Message(text=full, mention=Mention(m['id'], offset=0, length=len(mention_text))), gid, ThreadType.GROUP)
                count += 1
                print(grad(f"[{count}] {full}", (180,255,180), (100,255,255)))
            except Exception as e:
                print(grad(f"‚ö†Ô∏è L·ªói g·ª≠i ƒë·∫øn {m.get('name','?')}: {e}", (255,80,80), (255,150,150)))
            time.sleep(delay)

def spam_nhay_tag_multi(bot, gid, selected_members, delay, stop_event):
    try:
        with open("nhay.txt", "r", encoding="utf-8") as f:
            lines = [x.strip() for x in f if x.strip()]
    except:
        print(grad("‚ùå Kh√¥ng t√¨m th·∫•y file nhay.txt", (255,80,80), (255,150,150)))
        return
    count = 0
    while not stop_event.is_set():
        for msg in lines:
            if stop_event.is_set(): return
            for m in selected_members:
                if stop_event.is_set(): return
                try:
                    mention_text = f"@{m['name']}"
                    full = f"{mention_text} {msg}"
                    bot.send(Message(text=full, mention=Mention(m['id'], offset=0, length=len(mention_text))), gid, ThreadType.GROUP)
                    count += 1
                    print(grad(f"[{count}] {full}", (180,255,180), (100,255,255)))
                except Exception as e:
                    print(grad(f"‚ö†Ô∏è L·ªói g·ª≠i ƒë·∫øn {m.get('name','?')}: {e}", (255,80,80), (255,150,150)))
                time.sleep(delay)

# ===================== MENU / HELPERS =====================
def menu(c1, c2):
    print(grad("üéØ Ch·ªçn ch·ª©c nƒÉng:", c1, c2))
    print(grad("1Ô∏è‚É£  Nh√¢y ", c1, c2))
    print(grad("2Ô∏è‚É£  Ng√¥n ", c1, c2))
    print(grad("3Ô∏è‚É£  Ng√¥n Tag", c1, c2))
    print(grad("4Ô∏è‚É£  Nh√¢y Tag", c1, c2))
    print(grad("0Ô∏è‚É£  Tho√°t", c1, c2))

def choose_group(bot, c1, c2):
    groups = bot.fetch_groups()
    if not groups:
        print(grad("‚ùå Kh√¥ng c√≥ nh√≥m n√†o!", (255,80,80), (255,150,150)))
        return None
    lines = [f"{i+1}. {g['name']}" for i, g in enumerate(groups)]
    neon_box("üìã Danh s√°ch nh√≥m", lines, c1, c2)
    try:
        gidx = int(input(grad("üëâ Ch·ªçn nh√≥m (s·ªë): ", c1, c2)).strip()) - 1
        return groups[gidx]["id"]
    except Exception:
        print(grad("‚ùå L·ª±a ch·ªçn nh√≥m kh√¥ng h·ª£p l·ªá.", (255,80,80), (255,150,150)))
        return None

def choose_members_multi(bot, gid, c1, c2):
    members = bot.fetch_members(gid)
    if not members:
        print(grad("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c th√†nh vi√™n!", (255,80,80), (255,150,150)))
        return None
    # Clear screen before showing members (neat)
    clear()
    neon_lines = [f"{i+1}. {m['name']}" for i, m in enumerate(members)]
    neon_box("üë• Th√†nh vi√™n nh√≥m (g√µ s·ªë c√°ch nhau b·∫±ng d·∫•u ph·∫©y, vd: 1,3,5)", neon_lines, c1, c2)
    choice = input(grad("üëâ Nh·∫≠p c√°c s·ªë: ", c1, c2)).strip()
    parts = [p.strip() for p in choice.split(",") if p.strip()]
    sel = []
    for p in parts:
        try:
            idx = int(p) - 1
            if 0 <= idx < len(members):
                sel.append(members[idx])
        except:
            continue
    if not sel:
        print(grad("‚ùå Kh√¥ng c√≥ th√†nh vi√™n h·ª£p l·ªá ƒë∆∞·ª£c ch·ªçn.", (255,80,80), (255,150,150)))
        return None
    return sel

# ===================== MAIN =====================
def main():
    c1, c2 = theme()
    clear()
    banner_live(None, c1, c2)

    imei = input(grad("üì± Nh·∫≠p IMEI: ", c1, c2)).strip()
    cookie_str = input(grad("üç™ Nh·∫≠p cookie dict (v√≠ d·ª• {'token':'...'}): ", c1, c2)).strip()
    try:
        cookies = eval(cookie_str)
        if not isinstance(cookies, dict):
            raise ValueError("cookie ph·∫£i l√† dict")
    except Exception:
        print(grad("‚ùå Cookie kh√¥ng h·ª£p l·ªá! D·ª´ng.", (255,80,80), (255,150,150)))
        return

    bot = Bot(imei, cookies)

    while True:
        clear()
        banner_live(bot, c1, c2)
        menu(c1, c2)
        choice = input(grad("üëâ Nh·∫≠p l·ª±a ch·ªçn: ", c1, c2)).strip()
        if choice == "0":
            print(grad("‚èπÔ∏è Tho√°t ch∆∞∆°ng tr√¨nh.", (255,80,80), (255,150,150)))
            break

        # Choices 1..4 require group selection
        gid = choose_group(bot, c1, c2)
        if not gid:
            input(grad("Nh·∫•n Enter quay l·∫°i menu...", c1, c2))
            continue

        try:
            print(grad("‚è±Ô∏è Delay gi·ªØa m·ªói tin nh·∫Øn (gi√¢y, m·∫∑c ƒë·ªãnh 2)",c1, c2))
            delay = float(input(grad("‚è±Ô∏è T·ªëc ƒë·ªô : ", c1, c2)).strip() or 2)
        except:
            delay = 2.0

        stop_event = threading.Event()
        threads = []

        if choice == "1":
            # Nh√¢y (file nhay.txt) - no tag
            t = threading.Thread(target=spam_nhay, args=(bot, gid, delay, stop_event), daemon=True)
            t.start()
            threads.append(t)

        elif choice == "2":
            # Ng√¥n (manual single message) - no tag
            print(grad("Nh·∫≠p n·ªôi dung tin nh·∫Øn c·∫ßn g·ª≠i ",c1, c2))
            msg = input(grad("Nh·∫≠p Tin Nh·∫Øn :", c1, c2)).strip()
            if not msg:
                print(grad("‚ùå Tin nh·∫Øn tr·ªëng. H·ªßy.", (255,80,80), (255,150,150)))
                input(grad("Nh·∫•n Enter quay l·∫°i menu...", c1, c2))
                continue
            t = threading.Thread(target=spam_ngon, args=(bot, gid, msg, delay, stop_event), daemon=True)
            t.start()
            threads.append(t)

        elif choice == "3":
            # Ng√¥n + tag many
            selected = choose_members_multi(bot, gid, c1, c2)
            if not selected:
                input(grad("Nh·∫•n Enter quay l·∫°i menu...", c1, c2))
                continue
            print(grad("Nh·∫≠p n·ªôi dung tin nh·∫Øn c·∫ßn g·ª≠i ",c1, c2))
            msg = input(grad("Nh·∫≠p Tin Nh·∫Øn :", c1, c2)).strip()
            if not msg:
                print(grad("‚ùå Tin nh·∫Øn tr·ªëng. H·ªßy.", (255,80,80), (255,150,150)))
                input(grad("Nh·∫•n Enter quay l·∫°i menu...", c1, c2))
                continue
            t = threading.Thread(target=spam_ngon_tag_multi, args=(bot, gid, selected, msg, delay, stop_event), daemon=True)
            t.start()
            threads.append(t)

        elif choice == "4":
            # Nh√¢y + tag many
            selected = choose_members_multi(bot, gid, c1, c2)
            if not selected:
                input(grad("Nh·∫•n Enter quay l·∫°i menu...", c1, c2))
                continue
            t = threading.Thread(target=spam_nhay_tag_multi, args=(bot, gid, selected, delay, stop_event), daemon=True)
            t.start()
            threads.append(t)

        else:
            print(grad("‚ö†Ô∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!", (255,80,80), (255,150,150)))
            time.sleep(1)
            continue

        print(grad("\nüöÄ B·∫Øt ƒë·∫ßu spam. Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng.", c1, c2))
        try:
            hb = 0
            while True:
                time.sleep(300)
                hb += 1
                print(grad(f"üíì Tool v·∫´n ho·∫°t ƒë·ªông... ({hb} l·∫ßn ping)", c1, c2))
        except KeyboardInterrupt:
            stop_event.set()
            print(grad("‚èπÔ∏è D·ª´ng theo y√™u c·∫ßu. Tr·ªü v·ªÅ menu.", (255,80,80), (255,150,150)))
            time.sleep(1)
            continue

if __name__ == "__main__":
    main()
